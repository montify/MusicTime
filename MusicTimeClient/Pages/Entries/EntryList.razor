@page "/entryList"
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using MusicTimeClient.Contracts
@using MusicTimeClient.Models

@inject IDialogService DialogService

<div class="container ">
    <h3 class="text-center">♥Music and Guitar♥</h3>
    <div class="d-flex justify-content-center">
        <button type="button" class="btn btn-primary" @onclick="OnAddShow">Add Entry</button>
    </div>
    @if (isAddEntryToggle)
    {
        <AddEntry OnClick="OnAddEntry" />
        <br />
    }

    @if (EntryService is null)
    {
        <p class="text-center">Loading...</p>
    }
    else
    {
            <AuthorizeView>
            <Authorized>
                <MudDataGrid EditTrigger="DataGridEditTrigger.OnRowClick" T="Entry" Bordered="true" CommittedItemChanges="@CommitedItemChange" EditMode="DataGridEditMode.Form" ReadOnly="false" Items="@Entries">
                    <Columns>
                        <PropertyColumn Editable="false" Property="x => x.DateToString()" Title="Date"></PropertyColumn>
                        <PropertyColumn Property="x => x.DurationInMinutes" Title="Time"></PropertyColumn>
                        <PropertyColumn Property="x => x.Description" Title="Description"></PropertyColumn>
                        <TemplateColumn>
                            <CellTemplate Context="itemContext">
                                <MudButton @onclick="() => OpenDeleteDialogAsync(itemContext.Item.Id)" Color="Color.Secondary" Variant="Variant.Filled">Delete</MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </Authorized>
            <NotAuthorized> <!-- just render the same thin but with Button disabled and Grid ReadOnly true -->
                <MudDataGrid EditTrigger="DataGridEditTrigger.OnRowClick" T="Entry" Bordered="true" CommittedItemChanges="@CommitedItemChange" EditMode="DataGridEditMode.Form" ReadOnly="true" Items="@Entries">
                    <Columns>
                        <PropertyColumn Editable="false" Property="x => x.DateToString()" Title="Date"></PropertyColumn>
                        <PropertyColumn Property="x => x.DurationInMinutes" Title="Time"></PropertyColumn>
                        <PropertyColumn Property="x => x.Description" Title="Description"></PropertyColumn>
                        <TemplateColumn>
                            <CellTemplate Context="itemContext">
                                <MudButton Disabled="true" @onclick="() => OpenDeleteDialogAsync(itemContext.Item.Id)"  Variant="Variant.Filled">Delete</MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </NotAuthorized>
            </AuthorizeView>
    }
</div>

@code {
    [Inject]
    public IEntryService? EntryService { get; set; }
    [Inject]
    public IAuthService? AuthService { get; set; }

    public List<Entry> Entries = new List<Entry>();
    public bool isAddEntryToggle;
    public bool IsLoggedIn;

    public async Task OnAddEntry()
    {
        await FetchList();
    }

    private void OnAddShow(MouseEventArgs e)
    {
        isAddEntryToggle = !isAddEntryToggle;
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoggedIn = await AuthService.IsLoggedIn();

        await FetchList();
    }

    private async Task FetchList()
    {
        if (EntryService is not null)
        {
            Entries = (await EntryService.GetAllEntries()).ToList();
            Entries.Reverse();
            StateHasChanged();
        }
    }
    public async void CommitedItemChange(Entry entry)
    {
        if (EntryService is not null)
            await EntryService.UpdateEntry(entry);

        await FetchList();
    }

    private async void OpenDeleteDialogAsync(int entryId)
    {
        var parameter = new DialogParameters<int>();
        parameter.Add("EntryId", entryId);
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Wanna Delete?", parameter);
        var result = await dialog.Result;

        if (!result.Canceled)
            DeleteEntry(entryId);
    }

    public async void DeleteEntry(int entryId)
    {
        if (EntryService is not null)
            await EntryService.DeleteEntry(entryId);

        await FetchList();
    }
}